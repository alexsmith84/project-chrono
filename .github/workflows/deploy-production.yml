name: Deploy to Production

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  deploy-production:
    name: Deploy to Khala (Production)
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://nexus.hayven.xyz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-

      - name: Run all tests
        run: |
          if [ -d "src" ] && [ -f "Cargo.toml" ]; then
            cargo test --release
          fi
          if [ -f "package.json" ] && [ -n "$(jq -r '.scripts.test // empty' package.json)" ]; then
            bun test
          fi

      - name: Build Rust release
        run: |
          if [ -d "src" ] && [ -f "Cargo.toml" ]; then
            cargo build --release
          else
            echo "No Rust code found, skipping build"
          fi

      - name: Install Bun dependencies
        run: |
          if [ -f "package.json" ]; then
            bun install --production
          else
            echo "No package.json found, skipping"
          fi

      - name: Build frontend/API
        run: |
          if [ -f "package.json" ] && [ -n "$(jq -r '.scripts.build // empty' package.json)" ]; then
            bun run build
          else
            echo "No build script configured, skipping"
          fi

      - name: Create deployment backup
        run: |
          echo "Creating backup of current production deployment"
          echo "TODO: Implement backup creation"
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Run database migrations
        run: |
          echo "Database migrations would run here"
          echo "TODO: Implement when database schema is created"
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Deploy to production environment
        run: |
          echo "Deployment to production would happen here"
          echo "TODO: Implement SSH deployment or container deployment"
          echo "Target: nexus.hayven.xyz (Mac Mini M4 Pro)"
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Deploy Cloudflare Workers (production)
        run: |
          if [ -d "cloudflare-workers" ]; then
            echo "Deploying Cloudflare Workers to production"
            # npx wrangler deploy --env production
            echo "TODO: Implement Cloudflare Workers deployment"
          else
            echo "No Cloudflare Workers found, skipping"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Health check
        run: |
          echo "Health check would run here"
          echo "Verify production deployment is healthy"
          # curl -f https://nexus.hayven.xyz/health || exit 1

      - name: Verify FTSO submission
        run: |
          echo "Verify FTSO oracle is submitting correctly"
          echo "TODO: Implement FTSO verification check"

      - name: Smoke tests
        run: |
          echo "Running smoke tests against production"
          echo "TODO: Implement critical path smoke tests"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed - initiating rollback"
          echo "TODO: Implement automatic rollback"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Production deployment successful"
            echo "URL: https://nexus.hayven.xyz"
            echo "En Taro Tassadar! The Khala is strong!"
          else
            echo "‚ùå Production deployment failed"
            echo "Check logs and verify rollback completed"
          fi

      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            Deployed to production at ${{ github.event.head_commit.timestamp }}

            Commit: ${{ github.sha }}

            ü§ñ Generated with [Claude Code](https://claude.com/claude-code)
          draft: false
          prerelease: false
